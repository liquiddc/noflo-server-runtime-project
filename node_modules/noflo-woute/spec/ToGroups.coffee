noflo = require 'noflo'
unless noflo.isBrowser()
  chai = require 'chai' unless chai
  ToGroups = require '../components/ToGroups.coffee'
  _ = require 'underscore'
else
  ToGroups = require 'woute/components/ToGroups.js'
  _ = require 'underscore'

describe 'ToGroups component', ->
  globals = {}

  beforeEach ->
    globals.c = ToGroups.getComponent()
    globals.in = noflo.internalSocket.createSocket()
    globals.out = noflo.internalSocket.createSocket()
    globals.c.inPorts.in.attach globals.in
    globals.c.outPorts.out.attach globals.out

  describe 'when instantiated', ->
    it 'should have an input port', ->
      chai.expect(globals.c.inPorts.in).to.be.an 'object'
    it 'should have an output port', ->
      chai.expect(globals.c.outPorts.out).to.be.an 'object'

  describe 'converts to grouped packets', ->
    beforeEach ->
      globals.request =
        res:
          _mock: 'response object'
        req:
          url: '/login?username=password'
          headers:
            host: 'localhost:1337'
            accept: '*/*'
          body: 'some body'

    it 'converts the incoming request/response object into five distinct groups', (done) ->
      expectedGroups = ['url', 'headers', 'query', 'body', 'request']
      currentGroup = null
      request =
        res:
          _mock: 'response object'
        req:
          url: '/login?username=password'
          headers:
            host: 'localhost:1337'
            accept: '*/*'
          body: 'some body'
      expected = [
        '/login'
        request.req.headers
        { 'username': 'password' }
        'some body'
        request
      ]

      globals.out.on 'begingroup', (group) ->
        if expectedGroups[0] is group
          currentGroup = expectedGroups.shift()

      globals.out.on 'data', (data) ->
        chai.expect(data).to.deep.equal expected.shift()

      globals.out.on 'endgroup', (group) ->
        if currentGroup?
          chai.expect(currentGroup).to.equal group

      globals.out.on 'disconnect', ->
        chai.expect(expectedGroups.length).to.equal 0
        done()

      globals.in.send globals.request
      globals.in.disconnect()

    it 'still provides a grouping for missing content, like empty query string', (done) ->
      hasQuery = false

      # Pretend there's no query string
      globals.request.req.url = '/login'

      globals.out.on 'begingroup', (group) ->
        hasQuery = true if group is 'query'

      globals.out.on 'disconnect', ->
        chai.expect(hasQuery).to.be.true
        done()

      globals.in.send globals.request
      globals.in.disconnect()

    it 'retains groupings generated by noflo-webserver', (done) ->
      _done = _.once done
      expected = ['port', 'session-id']
      globals.out.on 'begingroup', (group) ->
        if expected.length > 0
          chai.expect(group).to.equal expected.shift()
        else
          _done()

      groups = _.clone expected
      for group in groups
        globals.in.beginGroup group
      globals.in.send globals.request
      for group in groups
        globals.in.endGroup()
      globals.in.disconnect()
