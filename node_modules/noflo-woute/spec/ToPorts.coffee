noflo = require 'noflo'
unless noflo.isBrowser()
  chai = require 'chai' unless chai
  ToPorts = require '../components/ToPorts.coffee'
  _ = require 'underscore'
else
  ToPorts = require 'woute/components/ToPorts.js'
  _ = require 'underscore'

describe 'ToPorts component', ->
  globals = {}

  beforeEach ->
    globals.c = ToPorts.getComponent()
    globals.in = noflo.internalSocket.createSocket()
    globals.url = noflo.internalSocket.createSocket()
    globals.headers = noflo.internalSocket.createSocket()
    globals.query = noflo.internalSocket.createSocket()
    globals.body = noflo.internalSocket.createSocket()
    globals.request = noflo.internalSocket.createSocket()
    globals.c.inPorts.in.attach globals.in
    globals.c.outPorts.url.attach globals.url
    globals.c.outPorts.headers.attach globals.headers
    globals.c.outPorts.query.attach globals.query
    globals.c.outPorts.body.attach globals.body
    globals.c.outPorts.request.attach globals.request

  describe 'when instantiated', ->
    it 'should have an input port', ->
      chai.expect(globals.c.inPorts.in).to.be.an 'object'
    it 'should have an output port', ->
      chai.expect(globals.c.outPorts.url).to.be.an 'object'
      chai.expect(globals.c.outPorts.headers).to.be.an 'object'
      chai.expect(globals.c.outPorts.query).to.be.an 'object'
      chai.expect(globals.c.outPorts.body).to.be.an 'object'
      chai.expect(globals.c.outPorts.request).to.be.an 'object'

  describe 'sends packets to separate ports', ->
    beforeEach ->
      globals.request =
        res:
          _mock: 'response object'
        req:
          url: '/login?username=password'
          headers:
            host: 'localhost:1337'
            accept: '*/*'
          body: 'some body'

    it 'sends incoming request/response object into five different ports', (done) ->
      request =
        res:
          _mock: 'response object'
        req:
          url: '/login?username=password'
          headers:
            host: 'localhost:1337'
            accept: '*/*'
          body: 'some body'

      globals.url.on 'data', (data) ->
        chai.expect(data).to.deep.equal '/login'
      globals.headers.on 'data', (data) ->
        chai.expect(data).to.deep.equal request.req.headers
      globals.query.on 'data', (data) ->
        chai.expect(data).to.deep.equal { 'username': 'password' }
      globals.body.on 'data', (data) ->
        chai.expect(data).to.deep.equal 'some body'
      globals.request.on 'data', (data) ->
        chai.expect(data).to.deep.equal request

      globals.request.on 'disconnect', ->
        done()

      globals.in.send globals.request
      globals.in.disconnect()

    it 'still forwards to port with no content', (done) ->
      # Pretend there's no query string
      globals.request.req.url = '/login'

      globals.query.on 'data', (data) ->
        done()

      globals.in.send globals.request
      globals.in.disconnect()

    it 'retains groupings generated by noflo-webserver', (done) ->
      expected = ['port', 'session-id']
      globals.request.on 'begingroup', (group) ->
        chai.expect(group).to.equal expected.shift()
        done() if expected.length is 0

      groups = _.clone expected
      for group in groups
        globals.in.beginGroup group
      globals.in.send globals.request
      for group in groups
        globals.in.endGroup()
      globals.in.disconnect()
